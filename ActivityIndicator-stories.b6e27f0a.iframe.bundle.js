"use strict";(self.webpackChunk_etvas_etvaskit=self.webpackChunk_etvas_etvaskit||[]).push([[8],{"./stories/ActivityIndicator.stories.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{LoadBar:()=>LoadBar,RunningBar:()=>RunningBar,Spinner:()=>Spinner,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _Spinner$parameters,_Spinner$parameters2,_RunningBar$parameter,_RunningBar$parameter2,_LoadBar$parameters,_LoadBar$parameters2,_src__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Demo/ActivityIndicator",component:_src__WEBPACK_IMPORTED_MODULE_0__.P2},Spinner=()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src__WEBPACK_IMPORTED_MODULE_0__.kC,{alignItems:"center",flexWrap:"wrap",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_src__WEBPACK_IMPORTED_MODULE_0__.kC,{justifyContent:"space-evenly",width:1,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src__WEBPACK_IMPORTED_MODULE_0__.P2,{colors:{background:"baseWhite",primary:"statusWarning"},size:"64px"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src__WEBPACK_IMPORTED_MODULE_0__.P2,{colors:{background:"baseWhite",primary:"statusSuccess"},size:"3rem"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src__WEBPACK_IMPORTED_MODULE_0__.P2,{colors:{background:"baseWhite",primary:"statusError"},size:24})]})});Spinner.displayName="Spinner";const RunningBar=()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src__WEBPACK_IMPORTED_MODULE_0__.xu,{py:8,mx:"auto",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src__WEBPACK_IMPORTED_MODULE_0__.Zb,{width:.5,variant:"baseWhite",position:"relative",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src__WEBPACK_IMPORTED_MODULE_0__.P2,{colors:{background:"baseWhite",primary:"brand"},position:"absolute",bottom:0,variant:"runningbar"})})});RunningBar.displayName="RunningBar";const LoadBar=()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src__WEBPACK_IMPORTED_MODULE_0__.xu,{py:8,mx:"auto",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src__WEBPACK_IMPORTED_MODULE_0__.Zb,{width:.5,position:"relative",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src__WEBPACK_IMPORTED_MODULE_0__.P2,{colors:["statusWarning","statusSuccess","statusError"],position:"absolute",top:0,variant:"loadbar"})})});LoadBar.displayName="LoadBar",Spinner.parameters={...Spinner.parameters,docs:{...null===(_Spinner$parameters=Spinner.parameters)||void 0===_Spinner$parameters?void 0:_Spinner$parameters.docs,source:{originalSource:"() => <Flex alignItems='center' flexWrap='wrap'>\n    <Flex justifyContent='space-evenly' width={1}>\n      <ActivityIndicator colors={{\n      background: 'baseWhite',\n      primary: 'statusWarning'\n    }} size='64px' />\n      <ActivityIndicator colors={{\n      background: 'baseWhite',\n      primary: 'statusSuccess'\n    }} size='3rem' />\n      <ActivityIndicator colors={{\n      background: 'baseWhite',\n      primary: 'statusError'\n    }} size={24} />\n    </Flex>\n  </Flex>",...null===(_Spinner$parameters2=Spinner.parameters)||void 0===_Spinner$parameters2||null===(_Spinner$parameters2=_Spinner$parameters2.docs)||void 0===_Spinner$parameters2?void 0:_Spinner$parameters2.source}}},RunningBar.parameters={...RunningBar.parameters,docs:{...null===(_RunningBar$parameter=RunningBar.parameters)||void 0===_RunningBar$parameter?void 0:_RunningBar$parameter.docs,source:{originalSource:"() => <Box py={8} mx='auto'>\n    <Card width={1 / 2} variant='baseWhite' position='relative'>\n      <ActivityIndicator colors={{\n      background: 'baseWhite',\n      primary: 'brand'\n    }} position='absolute' bottom={0} variant='runningbar' />\n    </Card>\n  </Box>",...null===(_RunningBar$parameter2=RunningBar.parameters)||void 0===_RunningBar$parameter2||null===(_RunningBar$parameter2=_RunningBar$parameter2.docs)||void 0===_RunningBar$parameter2?void 0:_RunningBar$parameter2.source}}},LoadBar.parameters={...LoadBar.parameters,docs:{...null===(_LoadBar$parameters=LoadBar.parameters)||void 0===_LoadBar$parameters?void 0:_LoadBar$parameters.docs,source:{originalSource:"() => <Box py={8} mx='auto'>\n    <Card width={1 / 2} position='relative'>\n      <ActivityIndicator colors={['statusWarning', 'statusSuccess', 'statusError']} position='absolute' top={0} variant='loadbar' />\n    </Card>\n  </Box>",...null===(_LoadBar$parameters2=LoadBar.parameters)||void 0===_LoadBar$parameters2||null===(_LoadBar$parameters2=_LoadBar$parameters2.docs)||void 0===_LoadBar$parameters2?void 0:_LoadBar$parameters2.source}}};const __namedExportsOrder=["Spinner","RunningBar","LoadBar"];Spinner.__docgenInfo={description:"",methods:[],displayName:"Spinner"},RunningBar.__docgenInfo={description:"",methods:[],displayName:"RunningBar"},LoadBar.__docgenInfo={description:"",methods:[],displayName:"LoadBar"}}}]);